package mmc.local.annotations;

import arc.struct.*;
import com.github.javaparser.*;
import com.github.javaparser.ast.*;
import com.github.javaparser.ast.Modifier.*;
import com.github.javaparser.ast.Node.*;
import com.github.javaparser.ast.body.*;
import mindustry.annotations.util.*;
import mmc.local.annotations.LocalAnnotations.*;

import javax.annotation.processing.*;
import javax.lang.model.element.*;
import java.util.*;

public class SettingsEnumProcessor extends LocalBaseProcessor{
    @Override
    public Set<String> getSupportedAnnotationTypes(){
        return new HashSet<>(Collections.singletonList(LocalAnnotation.class.getCanonicalName()));
    }

    @Override
    public void process(RoundEnvironment env) throws Exception{
        Stype stype = new Stype((TypeElement)Seq.with(env.getRootElements()).find(it -> it.toString().equals("mmc.annotations.ModAnnotations")));
        CompilationUnit compilationUnit = StaticJavaParser.parse(trees.getPath(stype.e).getCompilationUnit().toString());

        ClassOrInterfaceDeclaration modAnnotations = compilationUnit.getClassByName("ModAnnotations").get();
        AnnotationDeclaration annotationSettings =
        Seq.with(modAnnotations.findAll(AnnotationDeclaration.class, TreeTraversal.DIRECT_CHILDREN))
        .find(it -> it.getNameAsString().equals("AnnotationSettings"));
//        System.out.println(Seq.with(modAnnotations.getMembers()).toString("\n",it->it.getClass()+"_"+it.toString()));
//        System.out.println(annotationSettings);

        System.out.println(annotationSettings.getMetaModel());
        CompilationUnit resultCompilationUnit = new CompilationUnit(getPackageName());

        EnumDeclaration annotationSettingsEnum = resultCompilationUnit.addEnum("AnnotationSettingsEnum", Keyword.PUBLIC);

        for(AnnotationMemberDeclaration declaration : annotationSettings.findAll(AnnotationMemberDeclaration.class, TreeTraversal.DIRECT_CHILDREN)){
            EnumConstantDeclaration element = new EnumConstantDeclaration();
            element.setName(declaration.getName());
            /*declaration.getComment().ifPresent(it-> {
                element.addOrphanComment(it);
            });*/
            annotationSettingsEnum.addEntry(element);
        }
        System.out.println(annotationSettingsEnum);

        resultCompilationUnit.setLineComment("autogenerated file");

        write(resultCompilationUnit, annotationSettingsEnum.getNameAsString());
//        Seq.with(stype.e.getEnclosedElements()).find("")
//        System.out.println(with.toString("\n"));
    }
}
