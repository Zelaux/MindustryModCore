import java.time.format.DateTimeFormatter

buildscript {
    ext {
//        arcHash = 'v135'
        mindustryVersion = 'v135'
        jparcerVersion="3.22.1"
    }
    repositories {
        mavenLocal()
        mavenCentral()
        google()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url 'https://jitpack.io' }
    }
    dependencies {
        classpath "com.github.Anuken.Mindustry:core:$mindustryVersion"
        classpath "com.github.Anuken.Mindustry:tools:$mindustryVersion"
        classpath "com.github.Anuken.Arc:arc-core:$mindustryVersion"
        classpath "com.github.Anuken.Arc:packer:$mindustryVersion"
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.5.31'
    id "org.jetbrains.kotlin.kapt" version "1.5.31"
    id "groovy"
}
version '1.0'
allprojects {
    apply plugin: 'groovy'

    version = 'release'
    group = 'com.github.Zelaux'
    ext {
        arcModule = { String name ->
            //skip to last submodule
            if (name.contains(':')) name = name.split(':').last()
            return "com.github.Anuken.Arc:$name:$mindustryVersion"
        }
        mindustryModule = { String name ->
            //skip to last submodule
            if (name.contains(':')) name = name.split(':').last()
            return "com.github.Anuken.Mindustry:$name:$mindustryVersion"
        }
        writeProcessors = {
            new File(rootDir, "annotations/src/main/resources/META-INF/services/").mkdirs()
            def processorFile = new File(rootDir, "annotations/src/main/resources/META-INF/services/javax.annotation.processing.Processor")
            def text = new StringBuilder()
            def files = new File(rootDir, "annotations/src/main/java")
            files.eachFileRecurse(
                    groovy.io.FileType.FILES
            ) { file ->
                boolean isProcessor = file.text.contains(" extends ModBaseProcessor") ||
                        (file.text.contains(" extends AbstractProcessor") && !file.text.contains("abstract class")) ||
                        file.text.contains("@Annotations.AnnotationProcessor");
                if (file.name.endsWith(".java") && isProcessor) {
                    text.append(file.path.substring(files.path.length() + 1)).append("\n")
                }
            }

            processorFile.text = text.toString().replace(".java", "").replace("/", ".").replace("\\", ".")
        }
    }

    apply plugin: 'maven-publish'
    repositories {
        mavenLocal()
        google()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        maven { url 'https://jitpack.io' }
    }
    tasks.withType(JavaCompile) {
        targetCompatibility = 8
        sourceCompatibility = JavaVersion.VERSION_16
        options.encoding = "UTF-8"
        options.compilerArgs += ["-Xlint:deprecation"]

        options.forkOptions.jvmArgs.addAll([
                '--add-opens=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED',
                '--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
                '--add-opens=jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED',
                '--add-opens=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED',
                '--add-opens=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED',
                '--add-opens=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED',
                '--add-opens=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
                '--add-opens=java.base/sun.reflect.annotation=ALL-UNNAMED'
        ])
    }
}
//needed for android build
ext {
    //the build number that this mod is made for
    //version of SDK you will be using
    sdkVersion = '30'
    sdkRoot = System.getenv("ANDROID_HOME")

    doExec = { cmd ->
        def proc = cmd.execute(null, new File("$buildDir/libs"))
        proc.waitForProcessOutput(System.out, System.err)
    }
}
configure(project(":annotations")) {
    tasks.withType(JavaCompile) {
        targetCompatibility = 8
        sourceCompatibility = 8
        options.fork = true
    }
}

//compile with java 8 compatibility for everything except the annotation project
configure(subprojects - project(":annotations")) {
    tasks.withType(JavaCompile){
        options.compilerArgs.addAll(['--release', '8'])
    }

    tasks.withType(Javadoc){
        options{
            addStringOption('Xdoclint:none', '-quiet')
            addStringOption('-release', '16')
        }
    }
}
project(":core") {
    apply plugin: "java-library"
    apply plugin: "kotlin"
    apply plugin: "kotlin-kapt"

    kapt {
        javacOptions {
            option("-source", "16")
            option("-target", "1.8")
        }
    }
    compileJava.options.fork = true

    task preGen {
        outputs.upToDateWhen { false }
        writeProcessors()
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives sourcesJar
    }

    dependencies {
        compileJava.dependsOn(preGen)

        compileOnly "org.lz4:lz4-java:1.7.1"
        compileOnly arcModule("arc-core")
        compileOnly arcModule("extensions:flabel")
        compileOnly arcModule("extensions:freetype")
        compileOnly arcModule("extensions:g3d")
        compileOnly arcModule("extensions:fx")
        compileOnly arcModule("extensions:arcnet")

//        compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"
        compileOnly mindustryModule("core")
//        compileOnly mindustryModule("tools")
        project.getParent().getSubprojects().forEach(sub -> {
//            println "sub adding "+sub.getName()
            String name = sub.getName();
            println "subproject: " + sub.getName()
            if (!["tools", "annotations","plugins","tests", project.getName()].contains(name)) {
                println "implemented"
                implementation sub
            }
        })

        annotationProcessor 'com.github.Anuken:jabel:34e4c172e65b3928cd9eabe1993654ea79c409cd'
        compileOnly project(":annotations")
        kapt project(":annotations")
    }

    afterEvaluate {
        task mergedJavadoc(type: Javadoc) {
            def blacklist = [/*project(":ios"), project(":desktop"), project(":server"),*/ project(":annotations")]
            if (findProject(":android") != null) {
                blacklist += project(":android")
            }

            source rootProject.subprojects.collect { project ->
                if (!blacklist.contains(project) && project.hasProperty("sourceSets")) {
                    return project.sourceSets.main.allJava
                }
            }

            classpath = files(rootProject.subprojects.collect { project ->
                if (!blacklist.contains(project) && project.hasProperty("sourceSets")) {
                    return project.sourceSets.main.compileClasspath
                }
            })
            destinationDir = new File(buildDir, 'javadoc')
        }
    }
    jar {
        exclude("mma/entities/comp/**")
        exclude("mma/entities/compByAnuke/**")
    }
}

project(":tests") {
    apply plugin: "java"
    apply plugin: "java-library"
    apply plugin: "kotlin"
    apply plugin: "kotlin-kapt"

    kapt {
        javacOptions {
            option("-source", "16")
            option("-target", "1.8")
        }
    }
    compileJava.options.fork = true

    dependencies {
        implementation project(":core")
        implementation arcModule('arc-core')
        implementation mindustryModule('core')
        implementation mindustryModule('server')
        testImplementation "org.junit.jupiter:junit-jupiter-params:5.7.1"
        testImplementation "org.junit.jupiter:junit-jupiter-api:5.7.1"
        testImplementation arcModule("backends:backend-headless")
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.7.1"


        annotationProcessor 'com.github.Anuken:jabel:34e4c172e65b3928cd9eabe1993654ea79c409cd'
        compileOnly project(":annotations")
        kapt project(":annotations")

//        testImplementation "com.github.Zelaux.ZelauxModCore:core:$modCoreVersion"
//        testImplementation "com.github.Zelaux.ZelauxModCore:plugins:$modCoreVersion"
//        compileOnly "com.github.Zelaux.ZelauxModCore:annotations:$modCoreVersion"
    }

    test {
        //fork every test so mods don't interact with each other
        forkEvery = 1
        useJUnitPlatform()
        workingDir = new File("../core/assets")
        testLogging {
            exceptionFormat = 'full'
            showStandardStreams = true
        }
    }
}
project(":tools") {
    apply plugin: "java"

    dependencies {
        implementation 'commons-io:commons-io:2.5'

        implementation project(":core")
        implementation arcModule('arc-core')

        implementation "com.github.javaparser:javaparser-symbol-solver-core:$jparcerVersion"
        implementation mindustryModule("core")
        implementation mindustryModule("tools")
    }
}
project(":annotations") {
    apply plugin: "java-library"
    dependencies {
        implementation 'commons-io:commons-io:2.5'
        implementation 'com.squareup:javapoet:1.12.1'
        implementation arcModule('arc-core')
//        compileOnly project(":core")
        implementation mindustryModule("core")
        implementation "com.github.javaparser:javaparser-symbol-solver-core:$jparcerVersion"
        compileOnly mindustryModule("tools")
//                if(name!="tools")compile  project(":tools")
//        implementation  project(":core")
    }
}
project(":plugins") {
    apply plugin: "java-library"
    dependencies {
        implementation 'commons-io:commons-io:2.5'
        compileOnly arcModule('arc-core')
        compileOnly mindustryModule("core")
        compileOnly mindustryModule("server")
    }
}
project(":graphics") {
    apply plugin: "java-library"
    dependencies {
        implementation 'commons-io:commons-io:2.5'
        compileOnly arcModule('arc-core')
    }
}
configure(project.getSubprojects()-project(":tests")) {
    java {
        if (!name.equals("annotations")){
            println "doc for "+name
            withJavadocJar()
        }
        withSourcesJar()
    }

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
            }
        }
    }
}
task jarAndroid {
    dependsOn "jar"

    doLast {
        //collect dependencies needed for desugaring
        def files = (project(":core").configurations.compileClasspath.asList() + project(":core").configurations.runtimeClasspath.asList() + [new File("$sdkRoot/platforms/android-$sdkVersion/android.jar")])
        def dependencies = files.collect { "--classpath $it.path" }.join(" ")

        //dex and desugar files - this requires d8 in your PATH
        doExec("d8 $dependencies --min-api 14 --output ${project.archivesBaseName}Android.jar ${project.archivesBaseName}Desktop.jar")
    }
}
jar {
    dependsOn "core:jar"
    archiveFileName = "${project.archivesBaseName}Desktop.jar"
    from {
        project(":core").fileTree("build/libs/core.jar").collect { it.isDirectory() ? it : zipTree(it) }
    }

    from(rootDir) {
        include "mod.hjson"
        include "mod.json"
        include "icon.png"
    }

    from("core/assets/") {
        include "**"
    }
}
task deploy(type: Jar) {
    dependsOn jarAndroid
    dependsOn jar
    archiveFileName = "${project.archivesBaseName}.jar"

    from { [zipTree("$buildDir/libs/${project.archivesBaseName}Desktop.jar"), zipTree("$buildDir/libs/${project.archivesBaseName}Android.jar")] }

    doLast {
        delete { delete "$buildDir/libs/${project.archivesBaseName}Desktop.jar" }
        delete { delete "$buildDir/libs/${project.archivesBaseName}Android.jar" }
    }
}

task mjar(){
    dependsOn "core:jar"
    dependsOn "tests:jar"
    ext{
        acopy = { String intoPath ->
            def project=project(":tests");
            delete{
                delete "${intoPath}/${project.archivesBaseName}"
            }
            copy{
                from "$buildDir/../tests/build/libs/${project.archivesBaseName}"
                into intoPath
            }
            // println "$buildDir/../tests/build/libs/${project.archivesBaseName}.jar"
            println "Moved to ${intoPath}"
        }
    }
    doLast{
        def modsDirectories = [];
        def file = new File(rootDir, "modsDirectories.txt");

        if (file.exists()) {
            BufferedReader reader = new BufferedReader(new FileReader(file));
            reader.lines().forEach(line -> modsDirectories.add(line))
            reader.close();
        } else {
            modsDirectories.add("classic");
        }
        for (String directory : modsDirectories) {
            if (directory.equals("classic")) {
                directory = getdatadir() + "mods";
            }
//            println "directory: "+directory
            acopy(directory);
        }
        def time = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss"));
        println "Build ended at: ${time}"
    }
}
def os() { //Returns OS name
    String s = System.getProperty("os.name");
    return s == null ? "" : s;
}

def getdatadir() { //Returns Mindustry data directory path
    def ret = System.getenv("MINDUSTRY_DATA_DIR")
    if (ret == null) {
        def os = os()
        if (os.contains("Windows")) {
            return System.getenv("AppData") + "\\Mindustry\\"
        } else if (os.contains("Linux") || os.contains("BSD")) {
            if (System.getenv("XDG_DATA_HOME") != null) {
                String dir = System.getenv("XDG_DATA_HOME")
                if (!dir.endsWith("/")) dir += "/"
                return dir + "Mindustry/"
            }
            return System.getProperty("user.home") + "/.local/share/Mindustry/"
        } else if (os.contains("Mac")) {
            return System.getProperty("user.home") + "/Library/Application Support/Mindustry/";
        }
    }
    return ret
}