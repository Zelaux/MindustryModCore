//file:noinspection DependencyNotationArgument

plugins{
    id 'java'
    id 'maven-publish'
}

version '1.0'
//needed for android build

tasks.withType(JavaCompile){
    if(JavaVersion.current() != JavaVersion.VERSION_1_8){
        options.compilerArgs.addAll(['--release', '8'])
    }
    sourceCompatibility = 8
    targetCompatibility = 8
}
apply plugin: "java"
apply plugin: "java-library"
apply plugin: "kotlin"
apply plugin: "kotlin-kapt"
apply plugin: mmc.MindustryModGradle
mindustryModCore{
    jarMindustryTask()
    addKaptAnnotations()
    projectInfo{
        rootDirectory = project.projectDir
        assetsPath = "assets"
        assetsRawPath = "assets-raw"
        rootPackage = "coretest.tests"
        modInfoPath = "assets/mod.hjson"
        revisionsPath = "revisions"
        classPrefix = "Tm"
    }
}
kapt{
    javacOptions{
        option("-source", "16")
        option("-target", "1.8")
    }
}
compileJava.options.fork = true

dependencies{
    implementation project(":core")
    implementation project(":blocks")
    implementation project(":customBlockShape")
    implementation project(":tiledStructures")
    implementation project(":graphics")
    api arcLibModule("utils-io")
    api arcLibModule("graphics-extendedDraw")
    implementation arcModule('arc-core')
    implementation mindustryModule('core')
    compileOnly mindustryModule('server')


    testImplementation project(":core")
    testImplementation project(":blocks")
    testImplementation project(":customBlockShape")
    testImplementation project(":tiledStructures")

    testImplementation arcModule('arc-core')
    testImplementation mindustryModule('core')
    testImplementation mindustryModule('server')

    testImplementation "org.junit.jupiter:junit-jupiter-params:5.7.1"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.7.1"
    testImplementation arcModule("backends:backend-headless")
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.7.1"


    annotationProcessor "com.github.Anuken:jabel:$jabelVersion"
    compileOnly project(":annotations")
    compileOnly project(":tools")
    kapt project(":annotations")
}

test{
    //fork every test so mods don't interact with each other
    forkEvery = 1
    useJUnitPlatform()
//        workingDir = new File("../core/assets")
    testLogging{
        exceptionFormat = 'full'
        showStandardStreams = true
    }
}

compileJava.options.fork = true
project.archivesBaseName = "ZelauxModCoreTestMod.jar"
jar{
    dependsOn(":core:jar")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveFileName = "${project.archivesBaseName}."
    from{
        project(":core").fileTree("build/libs/core.jar").collect{ it.isDirectory() ? it : zipTree(it) }
    }
    from{
        configurations.runtimeClasspath.collect{
            it.isDirectory() ? it : zipTree(it)
        }
//        project(":core").fileTree("build/libs/core.jar").collect { it.isDirectory() ? it : zipTree(it) }
    }

    from(rootDir){
        include "mod.hjson"
        include "mod.json"
        include "icon.png"
    }

    from("core/assets/"){
        include "**"
    }
}
sourceSets.main.java.srcDirs = ["src/main/", "$buildDir/generated/sources/annotationProcessor/java/main"]
sourceSets.main.resources.srcDirs = ["assets/"]

sourceSets.test.resources.srcDirs = ["src/test/resources"]